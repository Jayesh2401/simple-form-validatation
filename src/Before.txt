import { FileUploader } from "react-drag-drop-files";
import { Fragment, useEffect, useRef, useState } from "react";
import "./App.css";
import Validator from "./Validator";
import Input from "./Input";

function App() {
  const [details, setDetails] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    state: "",
    country: "",
    zipCode: "",
    image: "",
    category: "",
    cardName: "",
    creditNo: "",
    credityear: "",
    cvc: "",
    checked: false,
  });
  const [error, setError] = useState({});
  const [country, setCountry] = useState([]);
  const [state, setState] = useState([]);
  const [city, setCity] = useState([]);
  const fileTypes = ["JPEG", "PNG", "GIF"];

  const handledChange = (file) => {
    setDetails((data) => ({ ...data, image: file.name }));
    setError((data) => ({ ...data, image: "" }));
  };

  const handleYear = (e) => {
    if (details.credityear === "") {
      setDetails((data) => ({ ...data, credityear: "" }));
    }

    if (details.credityear === "/") {
      setDetails((data) => ({
        ...data,
        credityear: "",
      }));
    } else if (details.credityear.length === 1) {
      setDetails((data) => ({
        ...data,
        credityear: e.target.value.slice(0, 2) + "/",
      }));
    } else {
      setDetails((data) => ({ ...data, credityear: e.target.value }));
    }

    if (e.target.value.slice(0, 2) > 12) {
      setError((data) => ({ ...data, creditNo: "Invalid month" }));
    } else if (e.target.value.slice(3) > 2035) {
      setError((data) => ({ ...data, creditNo: "Invalid Year" }));
    }
  };

  const countryData = () => {
    fetch("https://www.universal-tutorial.com/api/countries/", {
      method: "GET",
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJqYXllc2guYWhlcndhbEBtaW5kaW52ZW50b3J5LmNvbSIsImFwaV90b2tlbiI6IkRxRzBvcjhPalhTWUVGN1NhTUp6QnF0ZW8tRm5lOEIweUFsMXV0ZnlPcDZSVGhMc0RvNnZIaGtoT2xadVEtcV9SQkEifSwiZXhwIjoxNjY4NjYxOTQ4fQ.3TveVSb7-L8NFSUibGRyUoWQtD6qKf__DnNxaZRDtsw",
        Accept: "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => setCountry(data));
  };

  const stateData = (state) => {
    fetch(`https://www.universal-tutorial.com/api/states/${state}`, {
      method: "GET",
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJqYXllc2guYWhlcndhbEBtaW5kaW52ZW50b3J5LmNvbSIsImFwaV90b2tlbiI6IkRxRzBvcjhPalhTWUVGN1NhTUp6QnF0ZW8tRm5lOEIweUFsMXV0ZnlPcDZSVGhMc0RvNnZIaGtoT2xadVEtcV9SQkEifSwiZXhwIjoxNjY4NjYxOTQ4fQ.3TveVSb7-L8NFSUibGRyUoWQtD6qKf__DnNxaZRDtsw",
        Accept: "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => setState(data));
  };

  const cityData = (citi) => {
    fetch(`https://www.universal-tutorial.com/api/cities/${citi}`, {
      method: "GET",
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJqYXllc2guYWhlcndhbEBtaW5kaW52ZW50b3J5LmNvbSIsImFwaV90b2tlbiI6IkRxRzBvcjhPalhTWUVGN1NhTUp6QnF0ZW8tRm5lOEIweUFsMXV0ZnlPcDZSVGhMc0RvNnZIaGtoT2xadVEtcV9SQkEifSwiZXhwIjoxNjY4NjYxOTQ4fQ.3TveVSb7-L8NFSUibGRyUoWQtD6qKf__DnNxaZRDtsw",
        Accept: "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => setCity(data));
  };

  useEffect(() => {
    countryData();
    stateData();
    cityData();
  }, []);

  const check = [
    {
      css: "firstA",
      href: "/",
      title: "awards",
    },
    {
      css: "secondA",
      href: "/",
      title: "contact",
    },
    {
      css: "thirdA",
      href: "/",
      title: "our competions",
    },
  ];

  const submitHandler = (e) => {
    e.preventDefault();
    const { errors, noErrors } = Validator(details);

    if (noErrors) {
      console.log("true", details);
    } else {
      setError(errors);
    }
  };

  return (
    <div className="mainScreen">
      <div className="listView">
        <a className="mainImg font" href="/">
          awards
        </a>
        <div className="middleContent">
          {check.map((e, index) => {
            return (
              <Fragment key={index}>
                <a className={e.css} href={e.href}>
                  {e.title}
                </a>
              </Fragment>
            );
          })}
        </div>
        <a className="signin" href="/">
          SIGN IN
        </a>
      </div>
      <div className="secondScreen">
        <div className="firstHalf">
          <h3 className="head">Fill the Application </h3>
          <Input
            type="text"
            placeholder="Full Name"
            value={details.name}
            onChange={(e) => {
              setError((data) => ({ ...data, name: "" }));
              setDetails((data) => ({ ...data, name: e.target.value }));
            }}
          />
          {/* <input
            placeholder="Full Name"
            type="text"
            value={details.name}
            className="nameInput"
            onChange={(e) => {
              setError((data) => ({ ...data, name: "" }));
              setDetails((data) => ({ ...data, name: e.target.value }));
            }}
          /> */}
          <span className="errorM">{error.name}</span>
          <input
            placeholder="Enter Email Address"
            type="email"
            value={details.email}
            className="emailInput"
            onChange={(e) => {
              setError((data) => ({ ...data, email: "" }));
              setDetails((data) => ({ ...data, email: e.target.value }));
            }}
          />
          <span className="errorM">{error.email}</span>
          {/* <Input placeholder="Phone Number" type="number"/> */}
          <input
            placeholder="Phone Number"
            className="phoneInput"
            type="number"
            number="true"
            onKeyPress={(e) => e.key === "e" && e.preventDefault()}
            value={details.phone}
            onChange={(e) => {
              setError((data) => ({ ...data, phone: "" }));
              setDetails((data) => ({ ...data, phone: e.target.value }));
            }}
          />
          <span className="errorM">{error.phone}</span>
          <textarea
            placeholder="Street Address"
            className="AddressInput"
            type="address"
            value={details.address}
            onChange={(e) => {
              setError((data) => ({ ...data, address: "" }));
              setDetails((data) => ({ ...data, address: e.target.value }));
              setCity([]);
            }}
          />
          <span className="errorM">{error.address}</span>
          <div className="countryFlex">
            <div className="countrySelect">
              <select
                onChange={(e) => {
                  stateData(e.target.value);
                  setCity([]);
                  setState([]);
                  setDetails((data) => ({ ...data, city: "" }));
                  setDetails((data) => ({ ...data, state: "" }));
                  setError((data) => ({ ...data, country: "" }));
                  setDetails((data) => ({ ...data, country: e.target.value }));
                }}
              >
                <option>Country</option>
                {country.map((e, key) => {
                  return <option key={key}>{e.country_name}</option>;
                })}
              </select>
              <span className="errorM">{error.country}</span>
            </div>
            <div className="zipFlex">
              <input
                placeholder="Zip Code"
                className="zipCode"
                type="text"
                maxLength={6}
                value={details.zipCode}
                onChange={(e) => {
                  setError((data) => ({ ...data, zipCode: "" }));
                  setDetails((data) => ({ ...data, zipCode: e.target.value }));
                }}
              />
              <span className="errorM state">{error.zipCode}</span>
            </div>
          </div>
          <div className="cityFlex">
            <div className="CitySelect">
              <select
                onChange={(e) => {
                  cityData(e.target.value);
                  setDetails((data) => ({ ...data, city: "" }));
                  setCity([]);
                  setError((data) => ({ ...data, state: "" }));
                  setDetails((data) => ({ ...data, state: e.target.value }));
                }}
              >
                <option>----State----</option>
                {state.map((e, key) => {
                  return <option key={key}>{e.state_name}</option>;
                })}
              </select>
              <span className="errorM ">{error.state}</span>
            </div>

            <div className="CitySelect">
              <select
                className="stateSelect"
                onChange={(e) => {
                  setError((data) => ({ ...data, city: "" }));
                  setDetails((data) => ({ ...data, city: e.target.value }));
                }}
              >
                <option>--City--</option>
                {city.map((e, key) => {
                  return <option key={key}>{e.city_name}</option>;
                })}
              </select>
              <span className="errorM state">{error.city}</span>
            </div>
          </div>
        </div>
        <div className="secondHalf">
          <label htmlFor="uploadPhoto" className="uploadPhoto">
            Upload your photo <span>?</span>
          </label>
          <FileUploader
            multiple={false}
            handleChange={handledChange}
            name="file"
            maxSize={2}
            label="Upload_Files Drop Your Files"
            types={fileTypes}
          />
          <p className="nameS">{details.image}</p>
          <span className="errorM">{error.image}</span>
          <div className="contestSelect">
            <select
              onChange={(e) => {
                setError((data) => ({ ...data, category: "" }));
                setDetails((data) => ({ ...data, category: e.target.value }));
              }}
            >
              <option>Photo Contest Category</option>
              <option>Black</option>
              <option>Abstract</option>
              <option>Architecture</option>
              <option>Landscapes</option>
              <option>Nature</option>
              <option>RGB</option>
            </select>
            <span className="errorM">{error.category}</span>
          </div>
          <p className="payment">Payment Option</p>
          <div className="cardValid">
            <input
              placeholder="Name on Card*"
              type="text"
              className="nameCard"
              value={details.cardName}
              onChange={(e) => {
                setError((data) => ({ ...data, cardName: "" }));
                setDetails((data) => ({ ...data, cardName: e.target.value }));
              }}
            />
            <span className="errorM">{error.cardName}</span>
          </div>
          <div>
            <input
              placeholder="Credit Card*"
              className="creditNumber"
              maxLength={16}
              type="text"
              onChange={(e) => {
                setError((data) => ({ ...data, creditNo: "" }));
                setDetails((data) => ({ ...data, creditNo: e.target.value }));
              }}
            />
            <input
              className="yearCard"
              placeholder="mm/yr"
              value={details.credityear}
              maxLength={7}
              onChange={(e) => {
                setError((data) => ({ ...data, creditNo: "" }));
                handleYear(e);
                // setDetails((data) => ({ ...data, credityear: e.target.value }));
              }}
            />
            <input
              placeholder="cvc"
              maxLength={3}
              className="cvcCard"
              onChange={(e) => {
                setError((data) => ({ ...data, creditNo: "" }));
                setDetails((data) => ({ ...data, cvc: e.target.value }));
              }}
            />
            <span className="questionmarek">?</span>
            <img src="visa.png" alt="visa" className="visa" />
            <img src="master.png" alt="master" className="master" />
          </div>
          <span className="errorM">{error.creditNo}</span>
          <div className="checkBox">
            <input
              type="checkbox"
              onChange={(e) => {
                setError((data) => ({ ...data, checked: "" }));
                setDetails((data) => ({ ...data, checked: e.target.checked }));
              }}
            />{" "}
            I Agree{" "}
            <a href="/" className="terms">
              Terms and conditon{" "}
            </a>
          </div>
          <span className="errorM">{error.checked}</span>
          <div className="buttonManage">
            <button className="submitButton" onClick={(e) => submitHandler(e)}>
              Submit
            </button>
            <button className="cancelButton">Cancel</button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
 <FileDrop
              onFrameDragEnter={(event) =>
                console.log("onFrameDragEnter", event)
              }
              onFrameDragLeave={(event) =>
                console.log("onFrameDragLeave", event)
              }
              onFrameDrop={(event) => console.log("onFrameDrop", event)}
              onDragOver={(event) => console.log("onDragOver", event)}
              onDragLeave={(event) => console.log("onDragLeave", event)}
              onDrop={(files, event) => console.log("onDrop!", files, event)}
            >


            import { Fragment, useEffect, useRef, useState } from "react";
import "./App.css";
import Validator from "./Validator";

function App() {
  const [details, setDetails] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    state: "",
    country: "",
    zipCode: "",
    image: {},
    category: "",
    cardName: "",
    creditNo: "",
    credityear: "",
    cvc: "",
    checked: false,
  });
  const [error, setError] = useState({});
  const [country, setCountry] = useState([]);
  const [state, setState] = useState([]);
  const [city, setCity] = useState([]);
  const [dragActive, setDragActive] = useState(false);

  const inputRef = useRef(null);

  const handleYear = (e) => {
    if (details.credityear === "") {
      setDetails((data) => ({ ...data, credityear: "" }));
    }

    if (details.credityear === "/") {
      setDetails((data) => ({
        ...data,
        credityear: "",
      }));
    } else if (details.credityear.length === 1) {
      setDetails((data) => ({
        ...data,
        credityear: e.target.value.slice(0, 2) + "/",
      }));
    } else {
      setDetails((data) => ({ ...data, credityear: e.target.value }));
    }

    if (e.target.value.slice(0, 2) > 12) {
      setError((data) => ({ ...data, creditNo: "Invalid month" }));
    } else if (e.target.value.slice(3) > 2035) {
      setError((data) => ({ ...data, creditNo: "Invalid Year" }));
    }
  };

  const countryData = () => {
    fetch("https://www.universal-tutorial.com/api/countries/", {
      method: "GET",
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJqYXllc2guYWhlcndhbEBtaW5kaW52ZW50b3J5LmNvbSIsImFwaV90b2tlbiI6IkRxRzBvcjhPalhTWUVGN1NhTUp6QnF0ZW8tRm5lOEIweUFsMXV0ZnlPcDZSVGhMc0RvNnZIaGtoT2xadVEtcV9SQkEifSwiZXhwIjoxNjY4NjYxOTQ4fQ.3TveVSb7-L8NFSUibGRyUoWQtD6qKf__DnNxaZRDtsw",
        Accept: "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => setCountry(data));
  };

  const stateData = (state) => {
    fetch(`https://www.universal-tutorial.com/api/states/${state}`, {
      method: "GET",
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJqYXllc2guYWhlcndhbEBtaW5kaW52ZW50b3J5LmNvbSIsImFwaV90b2tlbiI6IkRxRzBvcjhPalhTWUVGN1NhTUp6QnF0ZW8tRm5lOEIweUFsMXV0ZnlPcDZSVGhMc0RvNnZIaGtoT2xadVEtcV9SQkEifSwiZXhwIjoxNjY4NjYxOTQ4fQ.3TveVSb7-L8NFSUibGRyUoWQtD6qKf__DnNxaZRDtsw",
        Accept: "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => setState(data));
  };

  const cityData = (citi) => {
    fetch(`https://www.universal-tutorial.com/api/cities/${citi}`, {
      method: "GET",
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJqYXllc2guYWhlcndhbEBtaW5kaW52ZW50b3J5LmNvbSIsImFwaV90b2tlbiI6IkRxRzBvcjhPalhTWUVGN1NhTUp6QnF0ZW8tRm5lOEIweUFsMXV0ZnlPcDZSVGhMc0RvNnZIaGtoT2xadVEtcV9SQkEifSwiZXhwIjoxNjY4NjYxOTQ4fQ.3TveVSb7-L8NFSUibGRyUoWQtD6qKf__DnNxaZRDtsw",
        Accept: "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => setCity(data));
  };

  console.log(details);

  useEffect(() => {
    countryData();
    stateData();
    cityData();
  }, []);

  const check = [
    {
      css: "firstA",
      href: "/",
      title: "awards",
    },
    {
      css: "secondA",
      href: "/",
      title: "contact",
    },
    {
      css: "thirdA",
      href: "/",
      title: "our competions",
    },
  ];

  const handleDrag = function (e) {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    console.log(e.dataTransfer.files);
    if (e.dataTransfer.files.length === 0) {
      setError((data) => ({
        ...data,
        image: "Please drag your images properly.",
      }));
    } else if (
      e.dataTransfer.files.type === "image/jpeg" &&
      e.dataTransfer.files.type === "image/png" &&
      e.dataTransfer.files.type === "image/svg+xml"
    ) {
      setError((data) => ({
        ...data,
        image: "File should be only .png/.jpeg/.jpg/.svg format.",
      }));
      setDetails((data) => ({ ...data, image: {} }));
    } else if (e.dataTransfer.files.size > 2097152) {
      setError((data) => ({
        ...data,
        image: "Please upload file less than 2MB.",
      }));
      setDetails((data) => ({ ...data, image: {} }));
    } else {
      setDetails((data) => ({ ...data, image: e.dataTransfer.files }));
    }

    // if (e.dataTransfer.files && e.dataTransfer.files[0]) {
    //   setDetails((data) => ({ ...data, image: e.dataTransfer.files }));
    // }
  };

  const handleChange = (e) => {
    e.preventDefault();
    const File = e.target.files[0];
    if (
      File.type !== "image/jpeg" &&
      File.type !== "image/png" &&
      File.type !== "image/svg+xml"
    ) {
      setError((data) => ({
        ...data,
        image: "File should be only .png/.jpeg/.jpg/.svg format.",
      }));
      setDetails((data) => ({ ...data, image: {} }));
    } else if (File.size > 2097152) {
      setError((data) => ({
        ...data,
        image: "Please upload file less than 2MB.",
      }));
      setDetails((data) => ({ ...data, image: {} }));
    } else {
      setDetails((data) => ({ ...data, image: File.name }));
    }
  };

  const onButtonClick = () => {
    inputRef.current.click();
  };

  const submitHandler = (e) => {
    e.preventDefault();
    const { errors, noErrors } = Validator(details);

    if (noErrors) {
      console.log("true", details);
    } else {
      setError(errors);
    }
  };

  return (
    <div className="mainScreen">
      <div className="listView">
        <a className="mainImg font" href="/">
          awards
        </a>
        <div className="middleContent">
          {check.map((e, index) => {
            return (
              <Fragment key={index}>
                <a className={e.css} href={e.href}>
                  {e.title}
                </a>
              </Fragment>
            );
          })}
        </div>
        <a className="signin" href="/">
          SIGN IN
        </a>
      </div>
      <div className="secondScreen">
        <div className="firstHalf">
          <h3 className="head">Fill the Application </h3>
          <input
            placeholder="Full Name"
            type="text"
            value={details.name}
            className="nameInput"
            onChange={(e) => {
              setError((data) => ({ ...data, name: "" }));
              setDetails((data) => ({ ...data, name: e.target.value }));
            }}
          />
          <span className="errorM">{error.name}</span>
          <input
            placeholder="Enter Email Address"
            type="email"
            value={details.email}
            className="emailInput"
            onChange={(e) => {
              setError((data) => ({ ...data, email: "" }));
              setDetails((data) => ({ ...data, email: e.target.value }));
            }}
          />
          <span className="errorM">{error.email}</span>
          <input
            placeholder="Phone Number"
            className="phoneInput"
            type="number"
            number="true"
            onKeyPress={(e) => e.key === "e" && e.preventDefault()}
            value={details.phone}
            onChange={(e) => {
              setError((data) => ({ ...data, phone: "" }));
              setDetails((data) => ({ ...data, phone: e.target.value }));
            }}
          />
          <span className="errorM">{error.phone}</span>
          <textarea
            placeholder="Street Address"
            className="AddressInput"
            type="address"
            value={details.address}
            onChange={(e) => {
              setError((data) => ({ ...data, address: "" }));
              setDetails((data) => ({ ...data, address: e.target.value }));
              setCity([]);
            }}
          />
          <span className="errorM">{error.address}</span>
          <div className="countryFlex">
            <div className="countrySelect">
              <select
                onChange={(e) => {
                  stateData(e.target.value);
                  setCity([]);
                  setState([]);
                  setDetails((data) => ({ ...data, city: "" }));
                  setDetails((data) => ({ ...data, state: "" }));
                  setError((data) => ({ ...data, country: "" }));
                  setDetails((data) => ({ ...data, country: e.target.value }));
                }}
              >
                <option>Country</option>
                {country.map((e, key) => {
                  return <option key={key}>{e.country_name}</option>;
                })}
              </select>
              <span className="errorM">{error.country}</span>
            </div>
            <div className="zipFlex">
              <input
                placeholder="Zip Code"
                className="zipCode"
                type="text"
                maxLength={6}
                value={details.zipCode}
                onChange={(e) => {
                  setError((data) => ({ ...data, zipCode: "" }));
                  setDetails((data) => ({ ...data, zipCode: e.target.value }));
                }}
              />
              <span className="errorM state">{error.zipCode}</span>
            </div>
          </div>
          <div className="cityFlex">
            <div className="CitySelect">
              <select
                onChange={(e) => {
                  cityData(e.target.value);
                  setDetails((data) => ({ ...data, city: "" }));
                  setCity([]);
                  setError((data) => ({ ...data, state: "" }));
                  setDetails((data) => ({ ...data, state: e.target.value }));
                }}
              >
                <option>----State----</option>
                {state.map((e, key) => {
                  return <option key={key}>{e.state_name}</option>;
                })}
              </select>
              <span className="errorM ">{error.state}</span>
            </div>

            <div className="CitySelect">
              <select
                className="stateSelect"
                onChange={(e) => {
                  setError((data) => ({ ...data, city: "" }));
                  setDetails((data) => ({ ...data, city: e.target.value }));
                }}
              >
                <option>--City--</option>
                {city.map((e, key) => {
                  return <option key={key}>{e.city_name}</option>;
                })}
              </select>
              <span className="errorM state">{error.city}</span>
            </div>
          </div>
        </div>
        <div className="secondHalf">
          <label htmlFor="uploadPhoto" className="uploadPhoto">
            Upload your photo <span>?</span>
          </label>
          <form
            id="form-file-upload"
            onDragEnter={handleDrag}
            onSubmit={(e) => e.preventDefault()}
          >
            <input
              ref={inputRef}
              type="file"
              id="input-file-upload"
              onChange={(e) => {
                setError((data) => ({ ...data, image: "" }));
                handleChange(e);
              }}
            />
            <label
              id="label-file-upload"
              htmlFor="input-file-upload"
              className={dragActive ? "drag-active" : ""}
            >
              <div>
                <img src="upload.svg" />
                <button className="upload-button" onClick={onButtonClick}>
                  Upload a file
                </button>
                <p className="dropArea">Drop your file</p>
              </div>
            </label>
            {dragActive && (
              <div
                id="drag-file-element"
                onDragEnter={handleDrag}
                onDragOver={handleDrag}
                onDragLeave={handleDrag}
                onDrop={handleDrop}
              ></div>
            )}
          </form>
          <span className="errorM">{error.image}</span>
          <div className="contestSelect">
            <select
              onChange={(e) => {
                setError((data) => ({ ...data, category: "" }));
                setDetails((data) => ({ ...data, category: e.target.value }));
              }}
            >
              <option>Photo Contest Category</option>
              <option>Black</option>
              <option>Abstract</option>
              <option>Architecture</option>
              <option>Landscapes</option>
              <option>Nature</option>
              <option>RGB</option>
            </select>
            <span className="errorM">{error.category}</span>
          </div>
          <p className="payment">Payment Option</p>
          <div className="cardValid">
            <input
              placeholder="Name on Card*"
              type="text"
              className="nameCard"
              value={details.cardName}
              onChange={(e) => {
                setError((data) => ({ ...data, cardName: "" }));
                setDetails((data) => ({ ...data, cardName: e.target.value }));
              }}
            />
            <span className="errorM">{error.cardName}</span>
          </div>
          <div>
            <input
              placeholder="Credit Card*"
              className="creditNumber"
              maxLength={16}
              type="text"
              onChange={(e) => {
                setError((data) => ({ ...data, creditNo: "" }));
                setDetails((data) => ({ ...data, creditNo: e.target.value }));
              }}
            />
            <input
              className="yearCard"
              placeholder="mm/yr"
              value={details.credityear}
              maxLength={7}
              onChange={(e) => {
                setError((data) => ({ ...data, creditNo: "" }));
                handleYear(e);
                // setDetails((data) => ({ ...data, credityear: e.target.value }));
              }}
            />
            <input
              placeholder="cvc"
              maxLength={3}
              className="cvcCard"
              onChange={(e) => {
                setError((data) => ({ ...data, creditNo: "" }));
                setDetails((data) => ({ ...data, cvc: e.target.value }));
              }}
            />
            <span className="questionmarek">?</span>
            <img src="visa.png" alt="visa" className="visa" />
            <img src="master.png" alt="master" className="master" />
          </div>
          <span className="errorM">{error.creditNo}</span>
          <div className="checkBox">
            <input
              type="checkbox"
              onChange={(e) => {
                setError((data) => ({ ...data, checked: "" }));
                setDetails((data) => ({ ...data, checked: e.target.checked }));
              }}
            />{" "}
            I Agree{" "}
            <a href="/" className="terms">
              Terms and conditon{" "}
            </a>
          </div>
          <span className="errorM">{error.checked}</span>
          <div className="buttonManage">
            <button className="submitButton" onClick={(e) => submitHandler(e)}>
              Submit
            </button>
            <button className="cancelButton">Cancel</button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;